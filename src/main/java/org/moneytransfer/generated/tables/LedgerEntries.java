/*
 * This file is generated by jOOQ.
 */
package org.moneytransfer.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.moneytransfer.generated.Keys;
import org.moneytransfer.generated.Public;
import org.moneytransfer.generated.enums.DebitCreditEnum;
import org.moneytransfer.generated.tables.records.LedgerEntriesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LedgerEntries extends TableImpl<LedgerEntriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ledger_entries</code>
     */
    public static final LedgerEntries LEDGER_ENTRIES = new LedgerEntries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LedgerEntriesRecord> getRecordType() {
        return LedgerEntriesRecord.class;
    }

    /**
     * The column <code>public.ledger_entries.entry_id</code>.
     */
    public final TableField<LedgerEntriesRecord, UUID> ENTRY_ID = createField(DSL.name("entry_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.ledger_entries.account_id</code>.
     */
    public final TableField<LedgerEntriesRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.ledger_entries.amount</code>.
     */
    public final TableField<LedgerEntriesRecord, Long> AMOUNT = createField(DSL.name("amount"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ledger_entries.debit_credit</code>.
     */
    public final TableField<LedgerEntriesRecord, DebitCreditEnum> DEBIT_CREDIT = createField(DSL.name("debit_credit"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(org.moneytransfer.generated.enums.DebitCreditEnum.class), this, "");

    /**
     * The column <code>public.ledger_entries.transfer_id</code>.
     */
    public final TableField<LedgerEntriesRecord, UUID> TRANSFER_ID = createField(DSL.name("transfer_id"), SQLDataType.UUID.nullable(false), this, "");

    private LedgerEntries(Name alias, Table<LedgerEntriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private LedgerEntries(Name alias, Table<LedgerEntriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ledger_entries</code> table reference
     */
    public LedgerEntries(String alias) {
        this(DSL.name(alias), LEDGER_ENTRIES);
    }

    /**
     * Create an aliased <code>public.ledger_entries</code> table reference
     */
    public LedgerEntries(Name alias) {
        this(alias, LEDGER_ENTRIES);
    }

    /**
     * Create a <code>public.ledger_entries</code> table reference
     */
    public LedgerEntries() {
        this(DSL.name("ledger_entries"), null);
    }

    public <O extends Record> LedgerEntries(Table<O> child, ForeignKey<O, LedgerEntriesRecord> key) {
        super(child, key, LEDGER_ENTRIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LedgerEntriesRecord> getPrimaryKey() {
        return Keys.LEDGER_ENTRIES_PKEY;
    }

    @Override
    public List<ForeignKey<LedgerEntriesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LEDGER_ENTRIES__FK_ACCOUNT_ID, Keys.LEDGER_ENTRIES__FK_TRANSFER_ID);
    }

    private transient Accounts _accounts;
    private transient Transfers _transfers;

    /**
     * Get the implicit join path to the <code>public.accounts</code> table.
     */
    public Accounts accounts() {
        if (_accounts == null)
            _accounts = new Accounts(this, Keys.LEDGER_ENTRIES__FK_ACCOUNT_ID);

        return _accounts;
    }

    /**
     * Get the implicit join path to the <code>public.transfers</code> table.
     */
    public Transfers transfers() {
        if (_transfers == null)
            _transfers = new Transfers(this, Keys.LEDGER_ENTRIES__FK_TRANSFER_ID);

        return _transfers;
    }

    @Override
    public LedgerEntries as(String alias) {
        return new LedgerEntries(DSL.name(alias), this);
    }

    @Override
    public LedgerEntries as(Name alias) {
        return new LedgerEntries(alias, this);
    }

    @Override
    public LedgerEntries as(Table<?> alias) {
        return new LedgerEntries(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LedgerEntries rename(String name) {
        return new LedgerEntries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LedgerEntries rename(Name name) {
        return new LedgerEntries(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LedgerEntries rename(Table<?> name) {
        return new LedgerEntries(name.getQualifiedName(), null);
    }
}
