/*
 * This file is generated by jOOQ.
 */
package org.moneytransfer.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.moneytransfer.generated.Keys;
import org.moneytransfer.generated.Public;
import org.moneytransfer.generated.enums.EventType;
import org.moneytransfer.generated.tables.records.TransactionLogRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionLog extends TableImpl<TransactionLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transaction_log</code>
     */
    public static final TransactionLog TRANSACTION_LOG = new TransactionLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionLogRecord> getRecordType() {
        return TransactionLogRecord.class;
    }

    /**
     * The column <code>public.transaction_log.transaction_id</code>.
     */
    public final TableField<TransactionLogRecord, UUID> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.transaction_log.transfer_id</code>.
     */
    public final TableField<TransactionLogRecord, UUID> TRANSFER_ID = createField(DSL.name("transfer_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.transaction_log.event</code>.
     */
    public final TableField<TransactionLogRecord, EventType> EVENT = createField(DSL.name("event"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(org.moneytransfer.generated.enums.EventType.class), this, "");

    /**
     * The column <code>public.transaction_log.timestamp</code>.
     */
    public final TableField<TransactionLogRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private TransactionLog(Name alias, Table<TransactionLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionLog(Name alias, Table<TransactionLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transaction_log</code> table reference
     */
    public TransactionLog(String alias) {
        this(DSL.name(alias), TRANSACTION_LOG);
    }

    /**
     * Create an aliased <code>public.transaction_log</code> table reference
     */
    public TransactionLog(Name alias) {
        this(alias, TRANSACTION_LOG);
    }

    /**
     * Create a <code>public.transaction_log</code> table reference
     */
    public TransactionLog() {
        this(DSL.name("transaction_log"), null);
    }

    public <O extends Record> TransactionLog(Table<O> child, ForeignKey<O, TransactionLogRecord> key) {
        super(child, key, TRANSACTION_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TransactionLogRecord> getPrimaryKey() {
        return Keys.TRANSACTION_LOG_PKEY;
    }

    @Override
    public List<ForeignKey<TransactionLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTION_LOG__FK_TRANSFER_ID);
    }

    private transient Transfers _transfers;

    /**
     * Get the implicit join path to the <code>public.transfers</code> table.
     */
    public Transfers transfers() {
        if (_transfers == null)
            _transfers = new Transfers(this, Keys.TRANSACTION_LOG__FK_TRANSFER_ID);

        return _transfers;
    }

    @Override
    public TransactionLog as(String alias) {
        return new TransactionLog(DSL.name(alias), this);
    }

    @Override
    public TransactionLog as(Name alias) {
        return new TransactionLog(alias, this);
    }

    @Override
    public TransactionLog as(Table<?> alias) {
        return new TransactionLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionLog rename(String name) {
        return new TransactionLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionLog rename(Name name) {
        return new TransactionLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionLog rename(Table<?> name) {
        return new TransactionLog(name.getQualifiedName(), null);
    }
}
