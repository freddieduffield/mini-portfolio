/*
 * This file is generated by jOOQ.
 */
package org.moneytransfer.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.moneytransfer.generated.Keys;
import org.moneytransfer.generated.Public;
import org.moneytransfer.generated.enums.TransferStatus;
import org.moneytransfer.generated.tables.records.TransfersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transfers extends TableImpl<TransfersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transfers</code>
     */
    public static final Transfers TRANSFERS = new Transfers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransfersRecord> getRecordType() {
        return TransfersRecord.class;
    }

    /**
     * The column <code>public.transfers.transfer_id</code>.
     */
    public final TableField<TransfersRecord, UUID> TRANSFER_ID = createField(DSL.name("transfer_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.transfers.from_account</code>.
     */
    public final TableField<TransfersRecord, UUID> FROM_ACCOUNT = createField(DSL.name("from_account"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.transfers.to_account</code>.
     */
    public final TableField<TransfersRecord, UUID> TO_ACCOUNT = createField(DSL.name("to_account"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.transfers.amount</code>.
     */
    public final TableField<TransfersRecord, Long> AMOUNT = createField(DSL.name("amount"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transfers.status</code>.
     */
    public final TableField<TransfersRecord, TransferStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.defaultValue(DSL.field(DSL.raw("'pending'::transfer_status"), SQLDataType.VARCHAR)).asEnumDataType(org.moneytransfer.generated.enums.TransferStatus.class), this, "");

    /**
     * The column <code>public.transfers.created_at</code>.
     */
    public final TableField<TransfersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.transfers.updated_at</code>.
     */
    public final TableField<TransfersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Transfers(Name alias, Table<TransfersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfers(Name alias, Table<TransfersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transfers</code> table reference
     */
    public Transfers(String alias) {
        this(DSL.name(alias), TRANSFERS);
    }

    /**
     * Create an aliased <code>public.transfers</code> table reference
     */
    public Transfers(Name alias) {
        this(alias, TRANSFERS);
    }

    /**
     * Create a <code>public.transfers</code> table reference
     */
    public Transfers() {
        this(DSL.name("transfers"), null);
    }

    public <O extends Record> Transfers(Table<O> child, ForeignKey<O, TransfersRecord> key) {
        super(child, key, TRANSFERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TransfersRecord> getPrimaryKey() {
        return Keys.TRANSFERS_PKEY;
    }

    @Override
    public List<ForeignKey<TransfersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSFERS__FK_FROM_ACCOUNT_ID, Keys.TRANSFERS__FK_TO_ACCOUNT_ID);
    }

    private transient Accounts _fkFromAccountId;
    private transient Accounts _fkToAccountId;

    /**
     * Get the implicit join path to the <code>public.accounts</code> table, via
     * the <code>fk_from_account_id</code> key.
     */
    public Accounts fkFromAccountId() {
        if (_fkFromAccountId == null)
            _fkFromAccountId = new Accounts(this, Keys.TRANSFERS__FK_FROM_ACCOUNT_ID);

        return _fkFromAccountId;
    }

    /**
     * Get the implicit join path to the <code>public.accounts</code> table, via
     * the <code>fk_to_account_id</code> key.
     */
    public Accounts fkToAccountId() {
        if (_fkToAccountId == null)
            _fkToAccountId = new Accounts(this, Keys.TRANSFERS__FK_TO_ACCOUNT_ID);

        return _fkToAccountId;
    }

    @Override
    public Transfers as(String alias) {
        return new Transfers(DSL.name(alias), this);
    }

    @Override
    public Transfers as(Name alias) {
        return new Transfers(alias, this);
    }

    @Override
    public Transfers as(Table<?> alias) {
        return new Transfers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfers rename(String name) {
        return new Transfers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfers rename(Name name) {
        return new Transfers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfers rename(Table<?> name) {
        return new Transfers(name.getQualifiedName(), null);
    }
}
