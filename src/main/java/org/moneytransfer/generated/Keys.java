/*
 * This file is generated by jOOQ.
 */
package org.moneytransfer.generated;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.moneytransfer.generated.tables.Accounts;
import org.moneytransfer.generated.tables.FlywaySchemaHistory;
import org.moneytransfer.generated.tables.LedgerEntries;
import org.moneytransfer.generated.tables.TransactionLog;
import org.moneytransfer.generated.tables.Transfers;
import org.moneytransfer.generated.tables.records.AccountsRecord;
import org.moneytransfer.generated.tables.records.FlywaySchemaHistoryRecord;
import org.moneytransfer.generated.tables.records.LedgerEntriesRecord;
import org.moneytransfer.generated.tables.records.TransactionLogRecord;
import org.moneytransfer.generated.tables.records.TransfersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountsRecord> ACCOUNTS_PKEY = Internal.createUniqueKey(Accounts.ACCOUNTS, DSL.name("accounts_pkey"), new TableField[] { Accounts.ACCOUNTS.ACCOUNT_ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<LedgerEntriesRecord> LEDGER_ENTRIES_PKEY = Internal.createUniqueKey(LedgerEntries.LEDGER_ENTRIES, DSL.name("ledger_entries_pkey"), new TableField[] { LedgerEntries.LEDGER_ENTRIES.ENTRY_ID }, true);
    public static final UniqueKey<TransactionLogRecord> TRANSACTION_LOG_PKEY = Internal.createUniqueKey(TransactionLog.TRANSACTION_LOG, DSL.name("transaction_log_pkey"), new TableField[] { TransactionLog.TRANSACTION_LOG.TRANSACTION_ID }, true);
    public static final UniqueKey<TransfersRecord> TRANSFERS_PKEY = Internal.createUniqueKey(Transfers.TRANSFERS, DSL.name("transfers_pkey"), new TableField[] { Transfers.TRANSFERS.TRANSFER_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<LedgerEntriesRecord, AccountsRecord> LEDGER_ENTRIES__FK_ACCOUNT_ID = Internal.createForeignKey(LedgerEntries.LEDGER_ENTRIES, DSL.name("fk_account_id"), new TableField[] { LedgerEntries.LEDGER_ENTRIES.ACCOUNT_ID }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ACCOUNT_ID }, true);
    public static final ForeignKey<LedgerEntriesRecord, TransfersRecord> LEDGER_ENTRIES__FK_TRANSFER_ID = Internal.createForeignKey(LedgerEntries.LEDGER_ENTRIES, DSL.name("fk_transfer_id"), new TableField[] { LedgerEntries.LEDGER_ENTRIES.TRANSFER_ID }, Keys.TRANSFERS_PKEY, new TableField[] { Transfers.TRANSFERS.TRANSFER_ID }, true);
    public static final ForeignKey<TransactionLogRecord, TransfersRecord> TRANSACTION_LOG__FK_TRANSFER_ID = Internal.createForeignKey(TransactionLog.TRANSACTION_LOG, DSL.name("fk_transfer_id"), new TableField[] { TransactionLog.TRANSACTION_LOG.TRANSFER_ID }, Keys.TRANSFERS_PKEY, new TableField[] { Transfers.TRANSFERS.TRANSFER_ID }, true);
    public static final ForeignKey<TransfersRecord, AccountsRecord> TRANSFERS__FK_FROM_ACCOUNT_ID = Internal.createForeignKey(Transfers.TRANSFERS, DSL.name("fk_from_account_id"), new TableField[] { Transfers.TRANSFERS.FROM_ACCOUNT }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ACCOUNT_ID }, true);
    public static final ForeignKey<TransfersRecord, AccountsRecord> TRANSFERS__FK_TO_ACCOUNT_ID = Internal.createForeignKey(Transfers.TRANSFERS, DSL.name("fk_to_account_id"), new TableField[] { Transfers.TRANSFERS.TO_ACCOUNT }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ACCOUNT_ID }, true);
}
